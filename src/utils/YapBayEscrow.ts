/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface YapBayEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ARBITRATION_DURATION"
      | "DEPOSIT_DURATION"
      | "DISPUTE_RESPONSE_DURATION"
      | "FIAT_DURATION"
      | "MAX_AMOUNT"
      | "VERSION"
      | "autoCancel"
      | "cancelEscrow"
      | "createEscrow"
      | "defaultJudgment"
      | "escrowBalances"
      | "escrows"
      | "fixedArbitrator"
      | "fundEscrow"
      | "getCalculatedEscrowBalance"
      | "getSequentialEscrowInfo"
      | "getStoredEscrowBalance"
      | "initialize"
      | "isEligibleForAutoCancel"
      | "markFiatPaid"
      | "nextEscrowId"
      | "openDisputeWithBond"
      | "owner"
      | "paused"
      | "proxiableUUID"
      | "releaseEscrow"
      | "renounceOwnership"
      | "resolveDisputeWithExplanation"
      | "respondToDisputeWithBond"
      | "transferOwnership"
      | "updateSequentialAddress"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "DisputeOpened"
      | "DisputeResolved"
      | "DisputeResponse"
      | "EscrowBalanceChanged"
      | "EscrowCancelled"
      | "EscrowCreated"
      | "EscrowReleased"
      | "FiatMarkedPaid"
      | "FundsDeposited"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "SequentialAddressUpdated"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ARBITRATION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISPUTE_RESPONSE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIAT_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autoCancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [BigNumberish, AddressLike, BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultJudgment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedArbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCalculatedEscrowBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSequentialEscrowInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredEscrowBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligibleForAutoCancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markFiatPaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextEscrowId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openDisputeWithBond",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDisputeWithExplanation",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "respondToDisputeWithBond",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSequentialAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ARBITRATION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISPUTE_RESPONSE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FIAT_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_AMOUNT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "autoCancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultJudgment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixedArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCalculatedEscrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSequentialEscrowInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoredEscrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEligibleForAutoCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markFiatPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEscrowId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openDisputeWithBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDisputeWithExplanation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondToDisputeWithBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSequentialAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeOpenedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    tradeId: BigNumberish,
    initiator: AddressLike,
    bondAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    tradeId: bigint,
    initiator: string,
    bondAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    tradeId: bigint;
    initiator: string;
    bondAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    decision: boolean,
    explanationHash: BytesLike,
    bondAllocation: string
  ];
  export type OutputTuple = [
    escrowId: bigint,
    decision: boolean,
    explanationHash: string,
    bondAllocation: string
  ];
  export interface OutputObject {
    escrowId: bigint;
    decision: boolean;
    explanationHash: string;
    bondAllocation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResponseEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    responder: AddressLike,
    bondAmount: BigNumberish,
    evidenceHash: BytesLike
  ];
  export type OutputTuple = [
    escrowId: bigint,
    responder: string,
    bondAmount: bigint,
    evidenceHash: string
  ];
  export interface OutputObject {
    escrowId: bigint;
    responder: string;
    bondAmount: bigint;
    evidenceHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowBalanceChangedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    newBalance: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    escrowId: bigint,
    newBalance: bigint,
    reason: string
  ];
  export interface OutputObject {
    escrowId: bigint;
    newBalance: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCancelledEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    tradeId: BigNumberish,
    seller: AddressLike,
    amount: BigNumberish,
    counter: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    tradeId: bigint,
    seller: string,
    amount: bigint,
    counter: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    tradeId: bigint;
    seller: string;
    amount: bigint;
    counter: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    tradeId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    arbitrator: AddressLike,
    amount: BigNumberish,
    deposit_deadline: BigNumberish,
    fiat_deadline: BigNumberish,
    sequential: boolean,
    sequentialEscrowAddress: AddressLike,
    timestamp: BigNumberish,
    version: string
  ];
  export type OutputTuple = [
    escrowId: bigint,
    tradeId: bigint,
    seller: string,
    buyer: string,
    arbitrator: string,
    amount: bigint,
    deposit_deadline: bigint,
    fiat_deadline: bigint,
    sequential: boolean,
    sequentialEscrowAddress: string,
    timestamp: bigint,
    version: string
  ];
  export interface OutputObject {
    escrowId: bigint;
    tradeId: bigint;
    seller: string;
    buyer: string;
    arbitrator: string;
    amount: bigint;
    deposit_deadline: bigint;
    fiat_deadline: bigint;
    sequential: boolean;
    sequentialEscrowAddress: string;
    timestamp: bigint;
    version: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowReleasedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    tradeId: BigNumberish,
    buyer: AddressLike,
    amount: BigNumberish,
    counter: BigNumberish,
    timestamp: BigNumberish,
    destination: string
  ];
  export type OutputTuple = [
    escrowId: bigint,
    tradeId: bigint,
    buyer: string,
    amount: bigint,
    counter: bigint,
    timestamp: bigint,
    destination: string
  ];
  export interface OutputObject {
    escrowId: bigint;
    tradeId: bigint;
    buyer: string;
    amount: bigint;
    counter: bigint;
    timestamp: bigint;
    destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FiatMarkedPaidEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    tradeId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    tradeId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    tradeId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    tradeId: BigNumberish,
    amount: BigNumberish,
    counter: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    tradeId: bigint,
    amount: bigint,
    counter: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    tradeId: bigint;
    amount: bigint;
    counter: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SequentialAddressUpdatedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    oldAddress: AddressLike,
    newAddress: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    oldAddress: string,
    newAddress: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    oldAddress: string;
    newAddress: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YapBayEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): YapBayEscrow;
  waitForDeployment(): Promise<this>;

  interface: YapBayEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ARBITRATION_DURATION: TypedContractMethod<[], [bigint], "view">;

  DEPOSIT_DURATION: TypedContractMethod<[], [bigint], "view">;

  DISPUTE_RESPONSE_DURATION: TypedContractMethod<[], [bigint], "view">;

  FIAT_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  autoCancel: TypedContractMethod<
    [_escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelEscrow: TypedContractMethod<
    [_escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createEscrow: TypedContractMethod<
    [
      _tradeId: BigNumberish,
      _buyer: AddressLike,
      _amount: BigNumberish,
      _sequential: boolean,
      _sequentialEscrowAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  defaultJudgment: TypedContractMethod<
    [_escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  escrowBalances: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  escrows: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        boolean,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string
      ] & {
        escrow_id: bigint;
        trade_id: bigint;
        seller: string;
        buyer: string;
        arbitrator: string;
        amount: bigint;
        deposit_deadline: bigint;
        fiat_deadline: bigint;
        state: bigint;
        sequential: boolean;
        sequential_escrow_address: string;
        fiat_paid: boolean;
        counter: bigint;
        dispute_initiator: string;
        dispute_bond_buyer: bigint;
        dispute_bond_seller: bigint;
        dispute_initiated_time: bigint;
        dispute_evidence_hash_buyer: string;
        dispute_evidence_hash_seller: string;
        dispute_resolution_hash: string;
      }
    ],
    "view"
  >;

  fixedArbitrator: TypedContractMethod<[], [string], "view">;

  fundEscrow: TypedContractMethod<
    [_escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCalculatedEscrowBalance: TypedContractMethod<
    [_escrowId: BigNumberish],
    [bigint],
    "view"
  >;

  getSequentialEscrowInfo: TypedContractMethod<
    [_escrowId: BigNumberish],
    [
      [boolean, string, bigint, boolean] & {
        isSequential: boolean;
        sequentialAddress: string;
        sequentialBalance: bigint;
        wasReleased: boolean;
      }
    ],
    "view"
  >;

  getStoredEscrowBalance: TypedContractMethod<
    [_escrowId: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_usdc: AddressLike, _arbitrator: AddressLike],
    [void],
    "nonpayable"
  >;

  isEligibleForAutoCancel: TypedContractMethod<
    [_escrowId: BigNumberish],
    [boolean],
    "view"
  >;

  markFiatPaid: TypedContractMethod<
    [_escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  nextEscrowId: TypedContractMethod<[], [bigint], "view">;

  openDisputeWithBond: TypedContractMethod<
    [_escrowId: BigNumberish, evidenceHash: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  releaseEscrow: TypedContractMethod<
    [_escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDisputeWithExplanation: TypedContractMethod<
    [_escrowId: BigNumberish, decision: boolean, explanationHash: BytesLike],
    [void],
    "nonpayable"
  >;

  respondToDisputeWithBond: TypedContractMethod<
    [_escrowId: BigNumberish, evidenceHash: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSequentialAddress: TypedContractMethod<
    [_escrowId: BigNumberish, newSequentialAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ARBITRATION_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEPOSIT_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DISPUTE_RESPONSE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIAT_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "autoCancel"
  ): TypedContractMethod<[_escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelEscrow"
  ): TypedContractMethod<[_escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEscrow"
  ): TypedContractMethod<
    [
      _tradeId: BigNumberish,
      _buyer: AddressLike,
      _amount: BigNumberish,
      _sequential: boolean,
      _sequentialEscrowAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultJudgment"
  ): TypedContractMethod<[_escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escrowBalances"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        boolean,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string
      ] & {
        escrow_id: bigint;
        trade_id: bigint;
        seller: string;
        buyer: string;
        arbitrator: string;
        amount: bigint;
        deposit_deadline: bigint;
        fiat_deadline: bigint;
        state: bigint;
        sequential: boolean;
        sequential_escrow_address: string;
        fiat_paid: boolean;
        counter: bigint;
        dispute_initiator: string;
        dispute_bond_buyer: bigint;
        dispute_bond_seller: bigint;
        dispute_initiated_time: bigint;
        dispute_evidence_hash_buyer: string;
        dispute_evidence_hash_seller: string;
        dispute_resolution_hash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fixedArbitrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundEscrow"
  ): TypedContractMethod<[_escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCalculatedEscrowBalance"
  ): TypedContractMethod<[_escrowId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSequentialEscrowInfo"
  ): TypedContractMethod<
    [_escrowId: BigNumberish],
    [
      [boolean, string, bigint, boolean] & {
        isSequential: boolean;
        sequentialAddress: string;
        sequentialBalance: bigint;
        wasReleased: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStoredEscrowBalance"
  ): TypedContractMethod<[_escrowId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_usdc: AddressLike, _arbitrator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isEligibleForAutoCancel"
  ): TypedContractMethod<[_escrowId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "markFiatPaid"
  ): TypedContractMethod<[_escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextEscrowId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openDisputeWithBond"
  ): TypedContractMethod<
    [_escrowId: BigNumberish, evidenceHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseEscrow"
  ): TypedContractMethod<[_escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDisputeWithExplanation"
  ): TypedContractMethod<
    [_escrowId: BigNumberish, decision: boolean, explanationHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "respondToDisputeWithBond"
  ): TypedContractMethod<
    [_escrowId: BigNumberish, evidenceHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSequentialAddress"
  ): TypedContractMethod<
    [_escrowId: BigNumberish, newSequentialAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeOpened"
  ): TypedContractEvent<
    DisputeOpenedEvent.InputTuple,
    DisputeOpenedEvent.OutputTuple,
    DisputeOpenedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResponse"
  ): TypedContractEvent<
    DisputeResponseEvent.InputTuple,
    DisputeResponseEvent.OutputTuple,
    DisputeResponseEvent.OutputObject
  >;
  getEvent(
    key: "EscrowBalanceChanged"
  ): TypedContractEvent<
    EscrowBalanceChangedEvent.InputTuple,
    EscrowBalanceChangedEvent.OutputTuple,
    EscrowBalanceChangedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCancelled"
  ): TypedContractEvent<
    EscrowCancelledEvent.InputTuple,
    EscrowCancelledEvent.OutputTuple,
    EscrowCancelledEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowReleased"
  ): TypedContractEvent<
    EscrowReleasedEvent.InputTuple,
    EscrowReleasedEvent.OutputTuple,
    EscrowReleasedEvent.OutputObject
  >;
  getEvent(
    key: "FiatMarkedPaid"
  ): TypedContractEvent<
    FiatMarkedPaidEvent.InputTuple,
    FiatMarkedPaidEvent.OutputTuple,
    FiatMarkedPaidEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SequentialAddressUpdated"
  ): TypedContractEvent<
    SequentialAddressUpdatedEvent.InputTuple,
    SequentialAddressUpdatedEvent.OutputTuple,
    SequentialAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "DisputeOpened(uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      DisputeOpenedEvent.InputTuple,
      DisputeOpenedEvent.OutputTuple,
      DisputeOpenedEvent.OutputObject
    >;
    DisputeOpened: TypedContractEvent<
      DisputeOpenedEvent.InputTuple,
      DisputeOpenedEvent.OutputTuple,
      DisputeOpenedEvent.OutputObject
    >;

    "DisputeResolved(uint256,bool,bytes32,string)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "DisputeResponse(uint256,address,uint256,bytes32)": TypedContractEvent<
      DisputeResponseEvent.InputTuple,
      DisputeResponseEvent.OutputTuple,
      DisputeResponseEvent.OutputObject
    >;
    DisputeResponse: TypedContractEvent<
      DisputeResponseEvent.InputTuple,
      DisputeResponseEvent.OutputTuple,
      DisputeResponseEvent.OutputObject
    >;

    "EscrowBalanceChanged(uint256,uint256,string)": TypedContractEvent<
      EscrowBalanceChangedEvent.InputTuple,
      EscrowBalanceChangedEvent.OutputTuple,
      EscrowBalanceChangedEvent.OutputObject
    >;
    EscrowBalanceChanged: TypedContractEvent<
      EscrowBalanceChangedEvent.InputTuple,
      EscrowBalanceChangedEvent.OutputTuple,
      EscrowBalanceChangedEvent.OutputObject
    >;

    "EscrowCancelled(uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;
    EscrowCancelled: TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;

    "EscrowCreated(uint256,uint256,address,address,address,uint256,uint256,uint256,bool,address,uint256,string)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "EscrowReleased(uint256,uint256,address,uint256,uint256,uint256,string)": TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;
    EscrowReleased: TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;

    "FiatMarkedPaid(uint256,uint256,uint256)": TypedContractEvent<
      FiatMarkedPaidEvent.InputTuple,
      FiatMarkedPaidEvent.OutputTuple,
      FiatMarkedPaidEvent.OutputObject
    >;
    FiatMarkedPaid: TypedContractEvent<
      FiatMarkedPaidEvent.InputTuple,
      FiatMarkedPaidEvent.OutputTuple,
      FiatMarkedPaidEvent.OutputObject
    >;

    "FundsDeposited(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SequentialAddressUpdated(uint256,address,address,uint256)": TypedContractEvent<
      SequentialAddressUpdatedEvent.InputTuple,
      SequentialAddressUpdatedEvent.OutputTuple,
      SequentialAddressUpdatedEvent.OutputObject
    >;
    SequentialAddressUpdated: TypedContractEvent<
      SequentialAddressUpdatedEvent.InputTuple,
      SequentialAddressUpdatedEvent.OutputTuple,
      SequentialAddressUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
